<h3>{% trans "Computed columns" %}</h3>
<p>{% trans "The values for computed columns are calculated using a formula, similar to how you know from it Excel." %}

<div style="margin-bottom:20px">
    <a class="btn virtual-columns">Add computed columns...</a><br> <br>
</div>
<link rel="stylesheet" media="screen" type="text/css" href="/static/vendor/codemirror/lib/codemirror.css" />
<link rel="stylesheet" media="screen" type="text/css" href="/static/vendor/codemirror/addon/hint/show-hint.css" />



<script type="text/javascript">
    $(function() {
        // initModal();
        $('.btn.virtual-columns').click(initModal);
        
        var firstRun = true,
            active = null,
            columns = {},
            cm = null;
            chart = dw.backend.currentChart;

        var modal = $('#virtual-columns'),
            code = $('.code', modal),
            colname = $('.col-name', modal),
            colNameGrp = d3.select(colname.parent().get(0)),
            colNameError = d3.select(modal.get(0)).select('.col-name-error'),
            val_preview = $('.value-preview', modal),
            nav = $('ul.nav', modal),
            emptyNote = d3.select($('.empty-note', modal)[0]),
            hint = $('.hint', modal),
            btnAdd = $('.btn-add-new', modal),
            btnRemove = $('.btn-remove', modal),
            btnClose = $('.btn-close', modal);

        function initModal() {
            modal.modal();

            if (firstRun) {
                initEditor();
            } else {
                initNav();
            }

            function onNameChange() {
                var new_name = colname.val();
                colNameError.classed('hide', true);
                colNameGrp.classed('error', false);

                if (new_name == active) return;

                if (columnNameExists(new_name)) {
                    colNameError.classed('hide', false);
                    colNameGrp.classed('error', true);
                    return;
                }
                columns[new_name] = columns[active];

                delete columns[active];
                active = new_name;
                chart.set('metadata.describe.virtual-columns', columns);
                chart.save();
                initNav();
            }
            

            function initNav() {
                columns = dw.utils.clone(chart.get('metadata.describe.virtual-columns', {}));
                if (_.isArray(columns)) columns = {};

                var keys = d3.keys(columns).filter(function(d) { return d; });
                
                if (!active && keys.length > 0) activate(keys[0]);
                if (!keys.length) {
                    btnRemove.addClass('hide');
                    hint.addClass('hide');
                    colname.attr('disabled', true);
                    cm.setOption('readOnly', true);
                    code.addClass('disabled');
                } else {
                    btnRemove.removeClass('hide');
                    hint.removeClass('hide');
                    colname.attr('disabled', false);
                    cm.setOption('readOnly', false);
                    code.removeClass('disabled');
                }

                nav.html('');
                emptyNote.classed('hide', keys.length);
                var li = d3.select(nav.get(0))
                    .selectAll('li')
                    .data(keys)
                    .enter().append('li')
                    .classed('active', function(d, i) { return active == d; });
                
                li.append('a')
                    .html(function(d) { return d; })
                    .on('click', function(d) {
                        active = d;
                        activate(d);
                        li.classed('active', function(d, i) { return active == d; });
                    });

            }

            function activate(d) {
                active = d;
                cm.setValue(columns[d] || '');
                cm.refresh();
                colname.val(d);
            }

            function initEditor() {

                btnClose.click(function() {
                    modal.modal('hide');
                });

                btnAdd.click(function() {
                    var cnbase = 'Untitled',
                        i = 1, name = cnbase;
                    while (columnNameExists(name)) name = cnbase + ' ('+(++i)+')';
                    columns[name] = '/* enter formula here */';
                    chart.set('metadata.describe.virtual-columns', columns);
                    chart.save();
                    activate(name);
                    initNav();
                    colname.focus().select();
                });

                btnRemove.click(function() {
                    delete columns[active];
                    colname.val('');
                    active = undefined;
                    chart.set('metadata.describe.virtual-columns', columns);
                    chart.save();
                    cm.setValue('');
                    val_preview.html('');
                    cm.refresh();
                    initNav();
                });

                require([
                    'cm/lib/codemirror',
                    'cm/mode/javascript/javascript',
                    'cm/addon/hint/show-hint',
                    'cm/addon/edit/matchbrackets',
                    'cm/addon/display/placeholder',
                ], function(CodeMirror) {

                    var keywords = chart.dataset().columns()
                        .filter(function(col) {
                            return !col.is_virtual;
                        }).map(function(col) {
                            return column_name_to_var(col.name());
                        });

                    function scriptHint(editor, options) {
                        // Find the token at the cursor
                        var cur = editor.getCursor(),
                            token = editor.getTokenAt(cur),
                            match = [];
                        
                        if (token.type == 'variable') {
                            match = keywords.filter(function(chk) {
                                return chk.toLowerCase().indexOf(token.string.toLowerCase()) === 0;
                            });
                        }

                        return {
                            list: match,
                            from: CodeMirror.Pos(cur.line, token.start),
                            to: CodeMirror.Pos(cur.line, token.end)
                        };
                    }

                    function column_name_to_var(name) {
                        return name.toString().toLowerCase()
                            .replace(/\s+/g, '_')           // Replace spaces with _
                            .replace(/[^\w\-]+/g, '')       // Remove all non-word chars
                            .replace(/\_\_+/g, '_')         // Replace multiple - with single -
                            .replace(/^_+/, '')             // Trim - from start of text
                            .replace(/_+$/, '');            // Trim - from end of text
                    }

                    CodeMirror.registerHelper("hint", "javascript", function(editor, options) {
                        return scriptHint(editor, options);
                    });

                    cm = CodeMirror(code.get(0), {
                        value: '',
                        mode: 'javascript',
                        theme: 'default',
                        indentUnit: 2,
                        tabSize: 2,
                        lineWrapping: true,
                        matchBrackets: true,
                        placeholder: '',
                        continueComments: "Enter",
                        extraKeys: {
                            'Tab': 'autocomplete'
                        }
                    });

                    colname.on('change keyup', _.throttle(onNameChange, 200));
                    
                    cm.on('changes', function() {
                        if (!active) return;
                        columns[active] = cm.getValue();
                        chart.set('metadata.describe.virtual-columns.'+active, cm.getValue());
                        chart.save();
                        if (chart.dataset().hasColumn(active)) {
                            val_preview.html(chart.dataset().column(active).raw()
                                .slice(0,5).join('<br>'));                            
                        }
                    });

                    firstRun = false;

                    initNav();
                });
            }

            function columnNameExists(cn) {
                return columns[cn] || chart.dataset().hasColumn(cn);
            }
            
        }
    });

</script>


<div class="modal hide" id="virtual-columns">
    <div class="modal-body">
        <button type="button" class="close" data-dismiss="modal">Ã—</button>

        <h3>Manage computed columns</h3>

        <div class="row" style="margin-bottom:20px;">
            <div class="span2">
                <label>Select/add column</label>
                <p class="empty-note hint hide">
                    Click <a class="btn-add-new">Add new</a> to create a new computed column.
                </p>
                <ul class="nav nav-stacked nav-tabs">
                    <li><a href="#" class="active">Untitled</a></li>
                </ul>
                
            </div>
            <div class="span3">
                <div class="control-group">
                    <label>Column name</label>
                    <input class="col-name" type="text" class="span3" />
                    <div class="col-name-error hide">This column name already exists</div>
                </div>
                <div class="control-group">
                    <label>Formula (JavaScript)</label>
                    <div class="code"></div>
                </div>
            </div>
            <div class="span2">
                <label>Value preview</label>
                <div class="value-preview well"></div>
                <p class="hint">
                    Hint: Use the Tab key to auto-complete column names.
                </p>
                <a class="btn-remove"><i class="fa fa-trash"></i> Remove this column</a>
            </div>
        </div>

        <a class="btn btn-close btn-primary"><i class="fa fa-check"></i> Close</a> 
        <div class="pull-right">
            <a class="btn btn-add-new"><i class="fa fa-plus"></i> Add new</a> &nbsp;
           
        </div>       
    </div>

</div>

<style>
#virtual-columns {
    width: 700px;
    margin-left: -350px;
    box-shadow: 0 0 20px rgba(0,0,0, 0.3);
    border: 0;
}

#virtual-columns h3 {
    margin-top: 0;
}

#virtual-columns label {
    display: block;
    font-weight: 400;
    /* text-transform: uppercase; */
    font-size: 13px;
    color: #777;
}

#virtual-columns .col-name-error {
    color: #D22525;
    font-size: 12px;
    position: relative;
    top: -7px;
}

#virtual-columns ul.nav li a {
    background: #F7F7F7;
    cursor: pointer;
}
#virtual-columns ul.nav li.active a {
    font-weight: bold;
    border-right: 0;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
    background: white;
}
#virtual-columns .col-name {
    font-weight: bold;
    font-family: Roboto;
}

#virtual-columns .well {
    padding: 10px;
    width: 80%;
    background: #f7f7f7;
}
.CodeMirror-hints {
    z-index: 10000;
}

#virtual-columns .CodeMirror {
    border-radius: 1px;
    width: 263px;
    height: 130px;
    padding: 0px 3px;
    border: 1px solid #cccccc;
    box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
    transition: border linear 0.2s, box-shadow linear 0.2s;
    background-color: #ffffff;
}

#virtual-columns .CodeMirror .CodeMirror-nonmatchingbracket {
    color: inherit;
    background: #fcc;
}
#virtual-columns .CodeMirror .CodeMirror-matchingbracket {
    color: inherit;
    background: #cfc;
}
#virtual-columns .CodeMirror-placeholder,
#virtual-columns .cm-s-default .cm-comment {
    color: #9C938B;
}

#virtual-columns .hint {
    font-size: 13px;
    color: #777;
}
#virtual-columns .code.disabled {
    cursor: not-allowed;
}
#virtual-columns .code.disabled .CodeMirror {
    pointer-events: none;
    background: #eee; 
}
#virtual-columns .CodeMirror-focused {
    border-color: rgba(82, 168, 236, 0.8);
    outline: 0;
    outline: thin dotted \9;
    -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);
    -moz-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);
    box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);
}
#virtual-columns .btn-remove {
    color: #b00;
    cursor: pointer;
}
</style>
